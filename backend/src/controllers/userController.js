import User from "../models/user.js";
import jwt from "jsonwebtoken";

/* Most of this codeblock was generated by GitHub copilot :O */
// handle errors
const handleErrors = (err) => {
  const errors = {username: "", email: "", password: ""};
  if (err.code === 11000) {
    errors.username = "Username or email already taken";
    return errors; // return errors object
  }
  // if validation errors
  if (err.errors) {
    for (const field in err.errors) {
      errors[field] = err.errors[field].properties.message;
    }
  }
  return errors;
};
const maxAge = 7 * 24 * 60 * 60;
const createToken = (id) => {
  return jwt.sign({id}, process.env.JWT_SECRET, {
    expiresIn: maxAge,
  });
};

const createUser = async (req, res) => {
  const {username, password, email} = req.body;
  console.log(username, password, email);
  try {
    const user = await new User({
      username: username,
      password: password,
      email: email,
      fullname: username,
      profile_picture: "default.png",
      date_registered: new Date(),
    });
    await user.save();
    const token = createToken(user._id);
    res.cookie("jwt", token, {
      httpOnly: true,
      maxAge: maxAge * 1000,
    });
    res.status(201).send({user: user._id});
  } catch (err) {
    const errs = handleErrors(err);
    if (email == "") errs["email"] = "";
    res.status(400).send(errs);
  }
};

const editUser = async (req, res) => {
  const {username} = req.params;
  let {fullname, profile_picture} = req.body;
  try {
    const user = await User.findOne({username: username});

    await user.updateOne({
      fullname: fullname ?? user.fullname,
      profile_picture: profile_picture ?? user.profile_picture,
    });
    res.status(201).send({user: user._id});
  } catch (err) {
    res.status(400).send(err);
  }
};

const login = async (req, res) => {
  const {username, password} = req.body;
  try {
    const user = await User.login(username, password);
    const token = createToken(user._id);
    res.cookie("jwt", token, {
      httpOnly: true,
      maxAge: maxAge * 1000,
    });
    res.status(200).send({user: user._id});
  } catch (err) {
    res.status(400).json({message: err.message});
  }
};

const logOut = async (req, res) => {
  res.clearCookie("jwt");
  res.status(200).send("Logged out");
};

const authorize = async (req, res) => {
  const token = req.cookies.jwt;
  const decoded = jwt.verify(token, process.env.JWT_SECRET);
  const user = await User.findById(decoded.id);
  await res.status(200).send({user: user, auth: true});
};

const findUserByName = async (req, res) => {
  const {username} = req.params;
  const user = await User.findOne({username: username});
  await res.status(200).send({user: user});
};

export {findUserByName, createUser, editUser, login, logOut, authorize};
